.row.filter
  .col-md-8
    = select_tag :source, options_for_select([["Aleph", "aleph"], ["ILLiad", "illiad"]]), onchange: "table.draw();"
    = select_tag :req_type, options_for_select([["Loan", "loan"], ["Scan", "scan"]]), onchange: "table.draw();"
    = label_tag :rapid, "ILLiad Rapid Requests"
    = check_box_tag :rapid, 1, false, onchange: "table.draw();"
  .col-md-4
    .pull-right
      = link_to sync_requests_path, method: :post, class: 'btn btn-primary' do
        %span.glyphicon.glyphicon-refresh
        = "Refresh"
= form_tag create_batch_path do |f|
  %table.table.table-striped.condensed.datatable{"id" => "requests"}
    %thead
      %tr
        %th.add
          'Add to Batch'
          = check_box_tag 'selectAll'
        %th= 'Rapid Request Indicator'
        %th= 'Request Source'
        %th= 'Request Type'
        %th= 'Request Date/Time'
        %th= 'Request Title (Book or Journal)'
        %th= 'Request Author'
        %th= 'Request Description'
        %th= 'Request Barcode'
        %th= 'Request ISSN/ISBN'
        %th= 'Request Bib Number'
        %th= 'Remove Request'
    %tbody
      - @data.each do |row|
        %tr{"id" => "request-" + row['id'].to_s, "data-items" => row['item_data'].to_json, "data-error" => row['error'] }
          %td
            %div{class: "details-control btn btn-primary", "id" => 'request_' + row['id'].to_s}= 'Results'
          %td= row['rapid']
          %td= row['source']
          %td= row['del_type']
          %td= row['requested']
          %td= row['title']
          %td= row['author']
          %td= row['description']
          %td
            - unless row['barcode'].blank?
              = link_to row['barcode'], item_detail_path(row['barcode'])
          %td= row['isbn_issn']
          %td= row['bib_number']
          %td
            .actions
              = link_to "Remove", remove_request_path(row["id"]), method: :delete, data: { confirm: 'Remove request?' }, class: 'btn btn-primary'
  .actions
    = submit_tag 'Save', class: 'btn btn-primary'
:javascript
  // Test a specific instance of data table settings to determine if
  // we should skip applying the top level request filters.
  // Returns true if "useRequestFilters" is not set on the instance
  function skipRequestFilters(settings){
    var api = new $.fn.dataTable.Api( settings );
    return !settings.oInit.useRequestFilters;
  }

  // Add filter by source to all DataTables
  $.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
      if(skipRequestFilters(settings)) {
        return true;
      }

      var select_source = $('#source').val().toLowerCase();
      var data_source = data[2].toLowerCase();
      if (select_source == data_source) {
        return true;
      }
      return false;
    }
  );

  // Add filter by request type to all DataTables
  $.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
      if(skipRequestFilters(settings)) {
        return true;
      }

      var select_req = $('#req_type').val().toLowerCase();
      var data_req = data[3].toLowerCase();
      if (select_req == data_req) {
        return true;
      }
      return false;
    }
  );

  // Add filter by rapid requests to all DataTables
  $.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex ) {
      if(skipRequestFilters(settings)) {
        return true;
      }

      var checkbox_rapid = $('#rapid').is(':checked');
      var data_rapid = data[1].toLowerCase();
      if (checkbox_rapid) {
        if (data_rapid == "yes") {
          return true;
        } else {
          return false;
        }
      } else {
        return true;
      }
    }
  );

  $(document).ready(function() {
    window.table = $('#requests').DataTable( {
        "useRequestFilters": true,
        "dom": 'T<"clear">lfrtip',
        "tableTools": {
          "aButtons": [ {
                    "sExtends": "print",
                    "sTitle": "",
                    "sInfo": "",
                    "sMessage": "",
                    "fnComplete": function ( nButton, oConfig, oFlash, sFlash ) {
                        alert('Use Browser Print feature. When done, hit "esc" on your keyboard to return to IMS.');

                        $('.ui-dialog,.ui-widget-overlay').addClass('doNotPrint');
                    }
                } ]
        },
        "drawCallback": function( settings ) {
          addHandler();
        }
    } );

    $("#selectAll").click(function() {
      $(".item").prop("checked", $("#selectAll").prop("checked"));
    } );
  } );

  function addHandler() {
    $(".details-control").unbind('click');
    $(".details-control").click(function() {
      var tr = $(this).closest('tr');
      var row = table.row( tr );

      // if this is the first click, the child row needs to be created
      if(!row.child()) {
        createChild(tr, row);
      }

      if ( row.child.isShown() ) {
        // This row is already open - close it
        row.child.hide();
        tr.removeClass('shown');
      }
      else {
        row.child.show();
        tr.addClass('shown');
      };
    });
  };

  function createChild(tr, parent) {
    var child = "";
    if(tr.data("error")) {
      child = "<div class='alert-danger'>" + tr.data("error") + "</div>";
    }
    child += format(tr);
    child = "<div class='batch-request-results'>" + child + "</div>";
    // Add two child rows and hide the first to prevent zebra striping from
    //  coloring the child row differently than the parent row
    var rows = ["", child]
    parent.child(rows);
    var children = parent.child();
    children.first().hide();
    var resultsRow = children.last()
    resultsRow.addClass('batch-request-results-row');

    // Add datatable to the child table
    var options = {
      "dom": "<'row'<'col-sm-12'fl>>" +
        "<'row'<'col-sm-12'tr>>" +
        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
      "useRequestFilters": false,
      "searching": false,
      "paging": false,
      "ordering": true,
      "info": false,
      "order": [[ 5, "asc" ]], // Sort by chron by default
    }

    if (tr.data('items').length > 10) {
      options.searching = true;
      options.paging = true;
      options.info = true;
    }

    resultsRow.find('table').DataTable(options);
  }

  function format(tr) {
    json = tr.data('items');
    if (json.length < 1) {
      str = "No results.";
    }
    else {
      str = "<table id='" + tr.attr('id') + "-items' class='table table-striped condensed datatable'>";

      str += "<thead>";
      str += "<tr>";
      str += "<th>Add to Batch</th>";
      str += "<th>Shelf</th>";
      str += "<th>Tray</th>";
      str += "<th>Title</th>";
      str += "<th>Author</th>";
      str += "<th>Chron</th>";
      str += "</tr>";
      str += "</thead>";

      str += "<tbody>";
      $.each(json, function( index, item ) {
        str += "<tr>";
        str += "<td>";
        switch(item['status'])
        {
          case 'stocked':
            str += "<input class='item' type='checkbox' name='batch[]' id='"+item['id']+"' value='"+item['id']+"' />";
            break;
          case 'unstocked':
            str += "<span style='color: red'>Unstocked</span>";
            break;
          case 'shipped':
            str += "<span style='color: red'>Shipped</span>";
            break;
          default:
            str += "<span style='color: red'>Unknown</span>"
            break;
        }
        str += "</td>";
        str += "<td>"+item['shelf']+"</td>";
        str += "<td>"+item['tray']+"</td>";
        str += "<td>"+item['title']+"</td>";
        str += "<td>"+item['author']+"</td>";
        str += "<td>"+item['chron']+"</td>";
        str += "</tr>";
      } );
      str += "</tbody>";

      str += "</table>";
    }
    return str;
  };
